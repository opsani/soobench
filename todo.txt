* (BB) add something like record_x_y_values_function.
  Same as record_target_values_function but logs x too.
  First version does _not_ need to be efficient. 
  If this produces an extremely large matrix it is the user's fault,
  i want to use this mainly for smaller, shorter "test" runs to
  analyze solvers.

* (BB) We need something like fixed_budget_function(fn, 1000). 
   Reason: Optimizers like optim, etc make it very hard (impossible?) to set
   a fixed budget, so comparisons become hard. This is ugly but we 
   probably have to throw an exception here and then catch it on the outside
   in client code. If we record y values we have all what we need. 

 * (LJ) Rename all generators to generate_<function name>. So
   'sphere_function' becomes 'generate_sphere_function'. See sphere.R
   for an example of what all other generators should look like.

 * (JB) More checks for arguments in generators, esp. check for NULLs.

 * Add more test cases to skel/inst/tests/.

 * Add more transformations.

 * (JB) Add a function to compute the ERT from a set of runs and also
   bootstrap variance as done in official BBOB code.

 * Improve noisy testbed.

 * (LJ) For each function, research where it was first mentioned in the
   literature. Add reference to manual page and bibtex entry to
   manual/functions.bib. If paper is not available online (add link to
   BibTeX entry if it is), order it from library and add scan to
   repository.

 * (LJ) Add formulas to help page of generators.

 * (JB) Improve efficiency of record_target_values_function(). 

 * Add missing generics for record_target_values_function(). 

 * (JB) Add HappyCat and Batman functions from:

    https://homepages.fhv.at/hgb/New-Papers/PPSN12_BF12.pdf

 * Currently we have a lot of redundant C code for handling SEXP. The R_SOOFUNCTION
   macro is fine for test functions which expect no parameters beside the vector x.
   Unfortunately until now we have copies of the function body of R_SOOFUNCTION in
   do_bbob_eval, do_happycat_eval and do_batman_eval.
     
 * Noise Models: Additive constant and fitness proportional. Parameter
   noise.

 * Check BBOB Noisy functions.

